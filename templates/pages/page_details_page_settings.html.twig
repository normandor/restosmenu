{% extends 'base.html.twig' %}

{% block stylesheets %}
  {{ parent() }}
    <style>
        .border-info {
            border: 1px solid #e0e0e0;
            border-radius: 5px;
        }
    </style>

{% endblock %}

{% block body %}
  <div id="main" class="container">
    <div class="row">
      <div id="sidebar-left" class="col-xs-2 col-sm-2">
        {{
          render(
            controller(
              'App\\Controller\\MenuController::index',
              {
                keep_open: 0,
                route: route
              },
              {
                username: user,
                avatar: true
              }
            )
          )
        }}
      </div>

      <div id="content" class="col-xs-12 col-sm-10">
        <div class="row">
          <div id="breadcrumb" class="col-xs-12">
            <a href="#" class="show-sidebar"><i class="fa fa-bars"></i></a>
            <ol class="breadcrumbpanel pull-left">
              <a href="#">Restaurant</a>
            </ol>
          </div>
        </div>

        <div class="pagename row pad-lt-15 pad-bt-15">
          <div class="col-sm">
            <h1>
              {{ pageName }}
              <br />
            </h1>
          </div>
        </div>
          <div class="row font-20">
              <div class="col-sm-10 mb-10">
                  {% for message in app.flashes('notice') %}
                      <div class="alert alert-success alert-dismissible " role="alert">
                          {{ message | trans }}
                          <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                              <span aria-hidden="true">&times;</span>
                          </button>
                      </div>
                  {% endfor %}
              </div>
          </div>

          {% if changesToSync == true %}
              <div class="row font-20" style="margin: 0px 5px 15px 5px">
                  <div class="col-sm-10 mb-10 text-center border-info">
                      <div style="padding-bottom: 10px;">{{ 'changes_to_sync' | trans | raw }}</div>
                      <button type="button" onclick="revertSettingChanges();" class="btn btn-primary">{{ 'button.undochanges' | trans }}</button>
                      <button type="button" onclick="publishSettingChanges();" class="btn btn-success">{{ 'button.publishchanges' | trans}}</button>
                  </div>
              </div>
          {% endif %}
          <div class="row font-20" style="margin-bottom:15px">
              <div class="col-sm-10 mb-10">

                  <h2>Apariencia del texto</h2>
              </div>
              <div class="col-sm-10 mb-10">
                  <div class="table-responsive">
                      <table>
                          <tr>
                              <th>
                                  Item
                              </th>
                              <th>
                                  Fuente
                              </th>
                              <th>
                                  Tamano de letra
                              </th>
                              <th>
                                  Color de letra
                              </th>
                              <th>
                                  Color de fondo
                              </th>
                          </tr>
                          {% for key, setting in settingsPage %}
                              <tr>
                                  <td class="left">
                                      {{ setting.name }}
                                  </td>
                                  <td class="left">
                                      <span href="#" style="cursor: pointer; font-family: {{ setting.properties["font-family"] }};"
                                            onClick="showFontSelector('{{ key }}', 'font-family');"
                                      >
                                          {{ setting.properties["font-family"] }}
                                      </span>
                                  </td>
                                  <td class="center">
                                      <select id="fontsize_{{ key }}" data-itemid="{{ key }}" data-property="font-size">
                                          {% for font_option in select.font_options %}
                                            <option value="{{ font_option }}"
                                                {{  (setting.properties["font-size"] == font_option) ? 'selected' : '' }}
                                            >
                                                {{ font_option }}
                                            </option>
                                          {% endfor %}
                                      </select>
                                  </td>
                                  <td class="center">
                                      {% if setting.properties.color != '' %}
                                          <label for="color"></label>
                                          <input type="color" value="{{ setting.properties.color }}" id="color_{{ key }}" data-itemid="{{ key }}" data-property="color">
                                      {% endif %}
                                  </td>
                                  <td class="center">
                                      {% if setting.properties["background-color"] != '' %}
                                        <label for="backgroundColor-{{ key }}"></label>
                                          <input type="color" value="{{ setting.properties["background-color"] }}" id="backgroundColor_{{ key }}" data-itemid="{{ key }}"  data-property="background-color">
                                      {% endif %}
                                  </td>
                              </tr>

                          {% endfor %}
                      </table>
                  </div>
              </div>

              <div class="col-sm-10 mb-10">
                  <hr style="margin: 20px 0px 20px 0px">
                  <h2>Apariencia de las im√°genes</h2>
              </div>

              <div class="col-sm-10 mb-10">
                  <div class="table-responsive">
                      <table>
                          <tr>
                              <th>
                                  Item
                              </th>
                              <th>
                                  Ancho celular
                              </th>
                              <th>
                                  Ancho PC
                              </th>
                              <th>
                                  Visible
                              </th>
                          </tr>
                          {% for key, setting in settingsImage %}
                              <tr>
                                  <td class="left">
                                      {{ setting.name }}
                                  </td>
                                  <td class="center">
                                      <select id="width_mobile_{{ key }}" data-itemid="{{ key }}" data-property="width" data-platform="mobile">
                                          {% for width in select.width_options %}
                                              <option value="{{ width }}"
                                                      {{  (setting.properties["width"]["mobile"] == width) ? 'selected' : '' }}
                                              >
                                                  {{ width }}
                                              </option>
                                          {% endfor %}
                                      </select>
                                  </td>
                                  <td class="center">
                                      <select id="width_desktop_{{ key }}" data-itemid="{{ key }}" data-property="width" data-platform="desktop">
                                          {% for width in select.width_options %}
                                              <option value="{{ width }}"
                                                      {{  (setting.properties["width"]["desktop"] == width) ? 'selected' : '' }}
                                              >
                                                  {{ width }}
                                              </option>
                                          {% endfor %}
                                      </select>
                                  </td>
                                  <td class="center">
                                      {% set img = (setting.properties["visible"] == 'true') ? 'images/toggle_on.png' : 'images/toggle_off.png' %}
                                      <img src="{{ asset(img) }}" height="30px" style="cursor: pointer;"
                                           onclick="updateSettingsViaAjax('image', '{{ key }}', 'visible', !{{ setting.properties["visible"] }}, 'desktop');"
                                      >
                                  </td>
                              </tr>

                          {% endfor %}
                      </table>
                  </div>
              </div>

          </div>
      </div>
    </div>
  </div>
    {{ include('user/modals/modal_confirm_large.twig') }}
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script type="text/javascript" src="{{ asset('build/js/nativeColorPicker.js') }}"></script>
  <script>
      {% for key, setting in settingsPage %}
          window.nativeColorPicker.init('color-{{ key }}');
          window.nativeColorPicker.init('backgroundColor-{{ key }}');
      {% endfor %}
      window.addEventListener("load", startup, false);

      function startup() {
          {% for key, setting in settingsPage %}
                color_{{ key }} = document.querySelector("#color_{{ key }}");
                if (typeof(color_{{ key }}) != "undefined" && color_{{ key }} != null) {
                    // fontColor.addEventListener("input", updateFirst, false);
                    color_{{ key }}.addEventListener("change", updateAll, false);
                    color_{{ key }}.select();
                }

                backgroundColor_{{ key }} = document.querySelector("#backgroundColor_{{ key }}");
                if (typeof(backgroundColor_{{ key }}) != "undefined" && backgroundColor_{{ key }} != null) {
                    backgroundColor_{{ key }}.addEventListener("change", updateAll, false);
                    backgroundColor_{{ key }}.select();
                }

              fontsize_{{ key }} = document.querySelector("#fontsize_{{ key }}");
              if (typeof(fontsize_{{ key }}) != "undefined" && fontsize_{{ key }} != null) {
                  fontsize_{{ key }}.addEventListener("change", updateAll, false);
              }
          {% endfor %}

          {% for key, setting in settingsImage %}
              width_desktop_{{ key }} = document.querySelector("#width_desktop_{{ key }}");
              if (typeof(width_desktop_{{ key }}) != "undefined" && width_desktop_{{ key }} != null) {
                  width_desktop_{{ key }}.addEventListener("change", updateImageSettings, false);
              }
              width_mobile_{{ key }} = document.querySelector("#width_mobile_{{ key }}");
              if (typeof(width_mobile_{{ key }}) != "undefined" && width_mobile_{{ key }} != null) {
                  width_mobile_{{ key }}.addEventListener("change", updateImageSettings, false);
              }
          {% endfor %}
      }

      function updateFirst(event) {
          var p = document.querySelector("td");

          if (p) {
              p.style.color = event.target.value;
          }
      }

      function updateAll(event) {
          let value;
          if (typeof(event.target.selectedIndex) != "undefined") {
              value = event.target.value;
          } else {
              value = event.target.value.replace("#", "");
          }

          let key = event.target.getAttribute('data-itemid');
          let property = event.target.getAttribute('data-property');

          updateSettingsViaAjax('text', key, property, value, 'desktop');
      }

      function updateSettingsViaAjax(thePath, key, property, value, platform) {
          let path = '';
          if (thePath === 'text') {
              path = '{{ path('update_setting', {'key': 'key', 'property': 'property', 'value': 'value'}) }}';
          }
          if (thePath === 'image') {
              path = '{{ path('update_image_setting', {'key': 'key', 'property': 'property', 'value': 'value', 'platform': 'platform'}) }}';
          }

          if (path === '') {
              return false;
          }

          var finalPath = path.replace("key", key);
          finalPath = finalPath.replace("property", property);
          finalPath = finalPath.replace("value", encodeURI(value));

          if (thePath === 'image') {
              finalPath = finalPath.replace("platform", platform);
          }

          $.ajax({
              url: finalPath,
              type: 'POST',
              dataType: 'json',
              success: function (data) {
                  location.reload();
              },
              error: function (xhr, status) {
                  alert("{{ 'alert.error.processing' | trans }}");
              }
          });
      }

      function updateImageSettings(event) {
          let value;
          if (typeof (event.target.selectedIndex) != "undefined") {
              value = event.target.value;
          } else {
              value = event.target.value.replace("#", "");
          }

          let key = event.target.getAttribute('data-itemid');
          let property = event.target.getAttribute('data-property');
          let platform = event.target.getAttribute('data-platform');

          updateSettingsViaAjax('image', key, property, value, platform);
      }

    function showFontSelector(id, name) {
        $(".modal-header #key").val(id);
        $(".modal-header #property").val(name);

        $('#myModalLabelMessage').load("/admin/page/element/select-font/" + id );
        $('#modal-del-btn-si').html('Aceptar');

        $("#confirmModal").modal('show');
    }

    var modalConfirmFontChange = function (callback) {
        $("#modal-del-btn-si").on("click", function () {
            callback(true);
            $("#confirmModal").modal('hide');
        });

        $("#modal-del-btn-no").on("click", function () {
            callback(false);
            $("#confirmModal").modal('hide');
        });
    };

    modalConfirmFontChange(function (confirm) {
        if (confirm) {
            let key = $("#key").val();
            let property = $("#property").val();
            let value = $("#value").val();

            let path = '{{ path('update_setting', {'key': 'key', 'property': 'property', 'value': 'value'}) }}';

            var finalPath = path.replace("key", key);
            finalPath = finalPath.replace("property", property);
            finalPath = finalPath.replace("value", value);

            $.ajax({
                url: finalPath,
                type: 'POST',
                dataType: 'json',
                success: function (data) {
                    location.reload();
                },
                error: function (xhr, status) {
                    alert("{{ 'alert.error.processing' | trans }}");
                }
            });

        } else {

        }
    });

  function revertSettingChanges() {
    $.ajax({
      url: "{{ path('clear_settings') }}",
      type: 'POST',
      dataType: 'json',
      success: function (data) {
          location.reload();
      },
      error: function (xhr, status) {
          alert("{{ 'alert.error.processing' | trans }}");
      }
    });
  }

  function publishSettingChanges() {
      $.ajax({
          url: "{{ path('publish_settings') }}",
          type: 'POST',
          dataType: 'json',
          success: function (data) {
              location.reload();
          },
          error: function (xhr, status) {
              alert("{{ 'alert.error.processing' | trans }}");
          }
      });
  }

  </script>
{% endblock %}
